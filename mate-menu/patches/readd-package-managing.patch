diff -Naur orig/data/mate-menu.1 patched/data/mate-menu.1
--- orig/data/mate-menu.1	2015-03-21 19:44:46.000000000 +0100
+++ patched/data/mate-menu.1	2015-03-21 19:49:51.834966566 +0100
@@ -4,8 +4,8 @@
 .SH SYNOPSIS
 .B mate-menu \fR[option]
 .SH DESCRIPTION
-An advanced menu for MATE. Supports filtering, favorites, autosession,
-and many other features.
+An advanced menu for MATE. Supports filtering, favorites,
+easy\-uninstallation, autosession, and many other features.
 
 .SH OPTIONS
 .TP
diff -Naur orig/data/mate-menu-config.glade patched/data/mate-menu-config.glade
--- orig/data/mate-menu-config.glade	2015-03-21 19:44:46.000000000 +0100
+++ patched/data/mate-menu-config.glade	2015-03-21 19:49:51.834966566 +0100
@@ -1128,6 +1128,25 @@
                       </packing>
                     </child>
                     <child>
+                      <object class="GtkCheckButton" id="use_apt">
+                        <property name="label" translatable="yes">Search for packages to install</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
+                        <property name="use_action_appearance">False</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="right_attach">2</property>
+                        <property name="top_attach">6</property>
+                        <property name="bottom_attach">7</property>
+                        <property name="x_options">GTK_FILL</property>
+                        <property name="y_options"/>
+                        <property name="x_padding">5</property>
+                      </packing>
+                    </child>
+                    <child>
                       <object class="GtkCheckButton" id="remember_filter">
                         <property name="label" translatable="yes">Remember the last category or search</property>
                         <property name="visible">True</property>
diff -Naur orig/data/plugins/org.mate.mate-menu.plugins.applications.gschema.xml patched/data/plugins/org.mate.mate-menu.plugins.applications.gschema.xml
--- orig/data/plugins/org.mate.mate-menu.plugins.applications.gschema.xml	2015-03-21 19:44:46.000000000 +0100
+++ patched/data/plugins/org.mate.mate-menu.plugins.applications.gschema.xml	2015-03-21 19:49:51.834966566 +0100
@@ -68,6 +68,12 @@
       <description></description>
     </key>
 
+    <key type="b" name="use-apt">
+      <default>true</default>
+      <summary></summary>
+      <description></description>
+    </key>
+
     <key type="i" name="last-active-tab">
       <default>0</default>
       <summary></summary>
diff -Naur orig/lib/get_apt_cache.py patched/lib/get_apt_cache.py
--- orig/lib/get_apt_cache.py	1970-01-01 01:00:00.000000000 +0100
+++ patched/lib/get_apt_cache.py	2015-03-21 19:49:51.834966566 +0100
@@ -0,0 +1,35 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+# Copyright (C) 2007-2014 Clement Lefebvre <root@linuxmint.com>
+# Copyright (C) 2015 Martin Wimpress <code@ubuntu-mate.org>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the
+# Free Software Foundation, Inc.,
+# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+
+import apt, sys
+
+try:
+    cache = apt.Cache()    
+    for pkg in cache:
+        if not pkg.is_installed:
+            name = pkg.name
+            summary = pkg.candidate.summary.capitalize()
+            description = pkg.candidate.description.replace("\n", "~~~")
+            print "CACHE" + "###" + str(name) + "###" + str(summary) + "###" + str(description)
+except Exception, detail:
+    print "ERROR###ERROR###ERROR###ERROR"
+    print detail
+    sys.exit(1)
diff -Naur orig/lib/mate-menu-config.py patched/lib/mate-menu-config.py
--- orig/lib/mate-menu-config.py	2015-03-21 19:44:46.000000000 +0100
+++ patched/lib/mate-menu-config.py	2015-03-21 19:49:51.838966585 +0100
@@ -62,6 +62,7 @@
         self.builder.get_object("showCategoryIcons").set_label(_("Show category icons"))
         self.builder.get_object("hover").set_label(_("Hover"))
         self.builder.get_object("remember_filter").set_label(_("Remember the last category or search"))
+        self.builder.get_object("use_apt").set_label(_("Search for packages to install"))
         self.builder.get_object("swapGeneric").set_label(_("Swap name and generic name"))
 
         self.builder.get_object("label11").set_text(_("Border width:"))
@@ -123,7 +124,8 @@
         self.folderChooserDialogTitle = (_("Select a folder"))
 
         self.startWithFavorites = self.builder.get_object( "startWithFavorites" )
-        self.showAppComments = self.builder.get_object( "showAppComments" )        
+        self.showAppComments = self.builder.get_object( "showAppComments" )
+        self.useAPT = self.builder.get_object( "use_apt" )
         self.showCategoryIcons = self.builder.get_object( "showCategoryIcons" )
         self.showRecentPlugin = self.builder.get_object( "showRecentPlugin" )
         self.showApplicationsPlugin = self.builder.get_object( "showApplicationsPlugin" )
@@ -201,6 +203,7 @@
 
         self.bindGSettingsValueToWidget( self.settings, "bool", "start-with-favorites", self.startWithFavorites, "toggled", self.startWithFavorites.set_active, self.startWithFavorites.get_active )
         self.bindGSettingsValueToWidget( self.settingsApplications, "bool", "show-application-comments", self.showAppComments, "toggled", self.showAppComments.set_active, self.showAppComments.get_active )
+        self.bindGSettingsValueToWidget( self.settingsApplications, "bool", "use-apt", self.useAPT, "toggled", self.useAPT.set_active, self.useAPT.get_active )
         self.bindGSettingsValueToWidget( self.settingsApplications, "bool", "show-category-icons", self.showCategoryIcons, "toggled", self.showCategoryIcons.set_active, self.showCategoryIcons.get_active )
         self.bindGSettingsValueToWidget( self.settingsApplications, "bool", "categories-mouse-over", self.hover, "toggled", self.hover.set_active, self.hover.get_active )
         self.bindGSettingsValueToWidget( self.settingsApplications, "bool", "swap-generic-name", self.swapGeneric, "toggled", self.swapGeneric.set_active, self.swapGeneric.get_active )
diff -Naur orig/lib/mate-menu.py patched/lib/mate-menu.py
--- orig/lib/mate-menu.py	2015-03-21 19:44:46.000000000 +0100
+++ patched/lib/mate-menu.py	2015-03-21 19:49:51.838966585 +0100
@@ -21,6 +21,7 @@
 
 __VERSION__='5.6.3'
 
+import apt
 import ctypes
 import gc
 import gi
diff -Naur orig/lib/mate-remove-application.py patched/lib/mate-remove-application.py
--- orig/lib/mate-remove-application.py	1970-01-01 01:00:00.000000000 +0100
+++ patched/lib/mate-remove-application.py	2015-03-21 19:49:51.838966585 +0100
@@ -0,0 +1,126 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+# Copyright (C) 2007-2014 Clement Lefebvre <root@linuxmint.com>
+# Copyright (C) 2015 Martin Wimpress <code@ubuntu-mate.org>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the
+# Free Software Foundation, Inc.,
+# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+
+import gi
+
+from gi.repository import Gtk, Gdk, GObject
+
+try:
+    import sys
+    import string
+    import os
+    import commands
+    import threading
+    import tempfile
+    import gettext
+
+except Exception, detail:
+    print detail
+    sys.exit(1)
+
+from subprocess import Popen
+
+# i18n
+gettext.install("mate-menu", "/usr/share/locale")
+
+class RemoveExecuter(threading.Thread):
+
+    def __init__(self, package):
+        threading.Thread.__init__(self)
+        self.package = package
+
+    def run(self):  
+        removePackages = string.split(self.package)
+        cmd = ["/usr/bin/synaptic", "--hide-main-window",  \
+                "--non-interactive"]
+        cmd.append("--progress-str")
+        cmd.append("\"" + _("Please wait, this can take some time") + "\"")
+        cmd.append("--finish-str")
+        cmd.append("\"" + _("Application removed successfully") + "\"")
+        f = tempfile.NamedTemporaryFile()
+        for pkg in removePackages:
+            f.write("%s\tdeinstall\n" % pkg)
+            cmd.append("--set-selections-file")
+            cmd.append("%s" % f.name)
+            f.flush()
+            comnd = Popen(' '.join(cmd), shell=True)
+        returnCode = comnd.wait()
+        f.close()        
+        sys.exit(0)
+
+class mateRemoveWindow:
+
+    def __init__(self, desktopFile):
+        self.desktopFile = desktopFile      
+        (status, output) = commands.getstatusoutput("dpkg -S " + self.desktopFile)
+        package = output[:output.find(":")]
+        if status != 0:            
+            warnDlg = Gtk.MessageDialog(None, 0, Gtk.MessageType.WARNING, Gtk.ButtonsType.YES_NO, _("This menu item is not associated to any package. Do you want to remove it from the menu anyway?"))            
+            warnDlg.vbox.set_spacing(10)
+            response = warnDlg.run()
+            if response == Gtk.ResponseType.YES :
+                print "removing '%s'" % self.desktopFile
+                os.system("rm -f '%s'" % self.desktopFile)
+                os.system("rm -f '%s.desktop'" % self.desktopFile)
+            warnDlg.destroy()            
+            sys.exit(0)     
+
+        warnDlg = Gtk.MessageDialog(None, 0, Gtk.MessageType.WARNING, Gtk.ButtonsType.OK_CANCEL, _("The following packages will be removed:"))            
+        warnDlg.vbox.set_spacing(10)
+
+        treeview = Gtk.TreeView()
+        column1 = Gtk.TreeViewColumn(_("Packages to be removed"))
+        renderer = Gtk.CellRendererText()
+        column1.pack_start(renderer, False)
+        column1.add_attribute(renderer, "text", 0)
+        treeview.append_column(column1)
+
+        model = Gtk.ListStore(str)
+        dependenciesString = commands.getoutput("apt-get -s -q remove " + package + " | grep Remv")
+        dependencies = string.split(dependenciesString, "\n")
+        for dependency in dependencies:
+            dependency = dependency.replace("Remv ", "")
+            model.append([dependency])
+        treeview.set_model(model)
+        treeview.show()
+
+        scrolledwindow = Gtk.ScrolledWindow()
+        scrolledwindow.set_shadow_type(Gtk.ShadowType.ETCHED_OUT)
+        scrolledwindow.set_size_request(150, 150)
+        scrolledwindow.add(treeview)
+        scrolledwindow.show()
+
+        warnDlg.get_content_area().add(scrolledwindow)
+
+        response = warnDlg.run()
+        if response == Gtk.ResponseType.OK :
+            executer = RemoveExecuter(package)
+            executer.start()
+        elif response == Gtk.ResponseType.CANCEL :
+            sys.exit(0)
+        warnDlg.destroy()
+
+        Gtk.main()
+
+if __name__ == "__main__":
+    mainwin = mateRemoveWindow(sys.argv[1])
+    Gtk.main()
+
diff -Naur orig/mate_menu/easybuttons.py patched/mate_menu/easybuttons.py
--- orig/mate_menu/easybuttons.py	2015-03-21 19:44:46.000000000 +0100
+++ patched/mate_menu/easybuttons.py	2015-03-21 19:49:51.838966585 +0100
@@ -406,6 +406,9 @@
             else:
                 Execute(self.appExec, self.appPath)
 
+    def uninstall (self, *args ):
+        Execute("/usr/lib/mate-menu/mate-remove-application.py " + self.desktopFile)
+
     # IconTheme changed, setup new icons for button and drag 'n drop
     def iconChanged( self ):
         easyButton.iconChanged( self )
diff -Naur orig/mate_menu/plugins/applications.py patched/mate_menu/plugins/applications.py
--- orig/mate_menu/plugins/applications.py	2015-03-21 19:44:46.000000000 +0100
+++ patched/mate_menu/plugins/applications.py	2015-03-21 19:55:39.164688881 +0100
@@ -296,6 +306,7 @@
             self.settings.notifyAdd( "swap-generic-name", self.changeSwapGenericName )
             self.settings.notifyAdd( "show-category-icons", self.changeShowCategoryIcons )
             self.settings.notifyAdd( "show-application-comments", self.changeShowApplicationComments )
+            self.settings.notifyAdd( "use-apt", self.switchAPTUsage)
             self.settings.notifyAdd( "fav-cols", self.changeFavCols )
             self.settings.notifyAdd( "remember-filter", self.changeRememberFilter)
 
@@ -337,6 +348,7 @@
             #for f in mymenu.directory.AppDirs:
             #       self.menuFileMonitors.append( filemonitor.addMonitor(f, self.onMenuChanged, mymenu.directory.Filename ) )
                         
+        self.refresh_apt_cache()        
         self.suggestions = []
         self.current_suggestion = None
         self.panel = "top"
@@ -344,6 +356,11 @@
 
         self.builder.get_object("searchButton").connect( "button-press-event", self.searchPopup )
 
+    def refresh_apt_cache(self):
+        if self.useAPT:
+            os.system("mkdir -p %s/.config/mate-menu/" % home)
+            os.system("/usr/lib/mate-menu/get_apt_cache.py > %s/.config/mate-menu/apt.cache &" % home)
+
     def get_panel(self):
         panelsettings = Gio.Settings.new("org.mate.panel")
         applet_list = panelsettings.get_strv("object-id-list")
@@ -356,6 +373,13 @@
                     self.panel = object_schema.get_string("toplevel-id")
                     self.panel_position = object_schema.get_int("position") + 1
 
+    def apturl_install(self, widget, pkg_name):
+        if os.path.exists("/usr/bin/apturl"):
+            os.system("/usr/bin/apturl apt://%s &" % pkg_name)
+        else:
+            os.system("xdg-open apt://" + pkg_name + " &")
+        self.mateMenuWin.hide()
+
     def __del__( self ):
         print u"Applications plugin deleted"
 
@@ -429,6 +453,10 @@
             if isinstance( child, FavApplicationLauncher):
                 child.setIconSize( self.faviconsize )
                 
+    def switchAPTUsage( self, settings, key, args ):
+        self.useAPT = settings.get_boolean(key)
+        self.refresh_apt_cache()
+
     def changeRememberFilter( self, settings, key, args):
         self.rememberFilter = settings.get_boolean(key)
 
@@ -456,6 +484,7 @@
             self.favoritesPositionOnGrid( fav )
 
     def RegenPlugin( self, *args, **kargs ):
+        self.refresh_apt_cache()
         
         # save old config - this is necessary because the app will notified when it sets the default values and you don't want the to reload itself several times
         oldcategories_mouse_over = self.categories_mouse_over
@@ -493,6 +522,7 @@
         self.showcategoryicons = self.settings.get( "bool", "show-category-icons")
         self.categoryhoverdelay = self.settings.get( "int", "category-hover-delay")
         self.showapplicationcomments = self.settings.get( "bool", "show-application-comments")
+        self.useAPT = self.settings.get( "bool", "use-apt")
         self.rememberFilter = self.settings.get( "bool", "remember-filter")
 
         self.lastActiveTab =  self.settings.get( "int", "last-active-tab")
@@ -660,6 +690,80 @@
         #self.last_separator.show_all()
         #self.applicationsBox.add(self.last_separator)
         #self.suggestions.append(self.last_separator)            
+
+    def add_apt_filter_results(self, keyword):
+        try:   
+            # Wait to see if the keyword has changed.. before doing anything
+            current_keyword = keyword
+            current_keyword = self.searchEntry.get_text()
+            if keyword != current_keyword:
+                return            
+            found_packages = []
+            found_in_name = []
+            found_elsewhere = []
+            keywords = keyword.split(" ")
+            command = "cat %(home)s/.config/mate-menu/apt.cache" % {'home':home}
+            for word in keywords:
+                command = "%(command)s | grep %(word)s" % {'command':command, 'word':word}
+            pkgs = commands.getoutput(command)
+            pkgs = pkgs.split("\n")
+            num_pkg_found = 0
+            for pkg in pkgs:
+                values = string.split(pkg, "###")
+                if len(values) == 4:
+                    status = values[0]
+                    if (status == "ERROR"):
+                        print "Could not refresh APT cache"
+                    elif (status == "CACHE"):
+                        name = values[1]
+                        summary = values[2]
+                        description = values[3].replace("~~~", "\n")
+                        package = PackageDescriptor(name, summary, description)
+                        #See if all keywords are in the name (so we put these results at the top of the list)
+                        some_found = False
+                        some_not_found = False
+                        for word in keywords:
+                            if word in package.name:
+                                some_found = True
+                            else:
+                                some_not_found = True
+                        if some_found and not some_not_found:
+                            found_in_name.append(package)
+                        else:                        
+                            found_elsewhere.append(package)                                        
+                        num_pkg_found+=1
+                    else:
+                        print "Invalid status code: " + status
+                
+            found_packages.extend(found_in_name)
+            found_packages.extend(found_elsewhere)
+            if keyword == self.searchEntry.get_text() and len(found_packages) > 0:         
+                last_separator = Gtk.EventBox()
+                last_separator.add(Gtk.HSeparator())
+                last_separator.set_visible_window(False)
+                last_separator.set_size_request(-1, 20)       
+                last_separator.type = "separator"       
+                last_separator.show_all()
+                self.applicationsBox.add(last_separator)
+                self.suggestions.append(last_separator)
+                #Reduce the number of results to 10 max... it takes a HUGE amount of time to add the GTK box in the menu otherwise..
+                if len(found_packages) > 10:
+                    found_packages = found_packages[:10]
+                for pkg in found_packages:                        
+                    name = pkg.name
+                    for word in keywords: 
+                        if word != "":             
+                            name = name.replace(word, "<b>%s</b>" % word);
+                    suggestionButton = SuggestionButton(Gtk.STOCK_ADD, self.iconSize, "")
+                    suggestionButton.connect("clicked", self.apturl_install, pkg.name)
+                    suggestionButton.set_text(_("Install package '%s'") % name)
+                    suggestionButton.set_tooltip_text("%s\n\n%s\n\n%s" % (pkg.name, pkg.summary, pkg.description))
+                    suggestionButton.set_icon_size(self.iconSize)
+                    self.applicationsBox.add(suggestionButton)
+                    self.suggestions.append(suggestionButton)
+                
+        except Exception, detail:
+            print detail           
             
     def Filter( self, widget, category = None ):
         self.filterTimer = None
@@ -693,6 +797,7 @@
                 if (not showns and os.path.exists("/usr/share/mate-menu/icons/mate-logo.svg")):
                     if len(text) >= 3:
                         self.add_search_suggestions(text)
+                        GLib.timeout_add (300, self.add_apt_filter_results, text)
                         self.current_suggestion = text
                     else:
                         self.current_suggestion = None
@@ -834,6 +939,7 @@
             startupMenuItem = Gtk.CheckMenuItem(_("Launch when I log in"))
             separator2 = Gtk.SeparatorMenuItem()
             launchMenuItem = Gtk.MenuItem(_("Launch"))
+            uninstallMenuItem = Gtk.MenuItem(_("Uninstall"))
             deleteMenuItem = Gtk.MenuItem(_("Delete from menu"))
             separator3 = Gtk.SeparatorMenuItem()
             propsMenuItem = Gtk.MenuItem(_("Edit properties"))
@@ -848,6 +954,8 @@
             mTree.append(separator2)
 
             mTree.append(launchMenuItem)
+            if os.path.exists("/usr/bin/synaptic"):
+                mTree.append(uninstallMenuItem)
             if home in widget.desktopFile:
                 mTree.append(deleteMenuItem)
                 deleteMenuItem.connect("activate", self.delete_from_menu, widget)
@@ -863,6 +971,8 @@
 
             launchMenuItem.connect( "activate", self.onLaunchApp, widget )
             propsMenuItem.connect( "activate", self.onPropsApp, widget)
+            if os.path.exists("/usr/bin/synaptic"):
+                uninstallMenuItem.connect ( "activate", self.onUninstallApp, widget )
 
             if self.isLocationInFavorites( widget.desktopFile ):
                 favoriteMenuItem.set_active( True )
@@ -1041,6 +1151,11 @@
         else:
             self.buildFavorites()
 
+
+    def onUninstallApp( self, menu, widget ):
+        widget.uninstall()
+        self.mateMenuWin.hide()
+
     def onFavoritesInsertSpace( self, menu, widget, insertBefore ):
         if insertBefore:
             self.favoritesAdd( self.favoritesBuildSpace(), widget.position )
diff -Naur orig/po/POTFILES.in patched/po/POTFILES.in
--- orig/po/POTFILES.in	2015-03-21 19:44:46.000000000 +0100
+++ patched/po/POTFILES.in	2015-03-21 19:49:51.838966585 +0100
@@ -1,5 +1,7 @@
+lib/get_apt_cache.py
 lib/mate-menu.py
 lib/mate-menu-config.py
+lib/mate-remove-application.py
 mate_menu/__init__.py
 mate_menu/plugins/__init__.py
 mate_menu/plugins/applications.py
diff -Naur orig/setup.py patched/setup.py
--- orig/setup.py	2015-03-21 19:44:46.000000000 +0100
+++ patched/setup.py	2015-03-21 19:49:51.838966585 +0100
@@ -92,7 +92,7 @@
 setup(
     name = "mate-menu",
     version = PROGRAM_VERSION,
-    description = "An advanced menu for MATE. Supports filtering, favorites, autosession, and many other features.",
+    description = "An advanced menu for MATE. Supports filtering, favorites, easy-uninstallation, autosession, and many other features.",
     license = 'GPLv2+',
     author = 'Martin Wimpress',
     url = 'https://bitbucket.org/flexiondotorg/mate-tweak/',
