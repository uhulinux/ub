To create a new instance of mlb2 object

first add the header file mlb2.h as include:
#include "mlb2.h";
then declare a new TMlb2 pointer somewhere in your class or in your programs:
TMlb2* myinstance;
then Create your instance:
myinstance = myinstance->Create();

Now you can apply all mlb2 api to this instance, ex: myinstance->Init();

At the end of your work free the instance by calling the Destroy destructor:
myinstance->Destroy();


To initialize a mlb2 table

call the Init method from a previously created instance:
myinstance->Init();

To Assign another table's data to a mlb2 table

call the Assign method from a previously created instance:
myinstance->Assign(otherinstance);


To get the version number of mlb2 object
call the GetVersionNumber API:
printf("%d", myinstance->GetVersionNumber());

To get the version string of mlb2 object
call the GetVersion API:
printf("%s", myinstance->GetVersion());


#include <stdio.h>;
#include "mlb2.h";

int main(int argc, char* argv[]) {
    TMlb2* mlb = mlb->Create();
     printf("%d", mlb->GetVersionNumber());
     mlb->Destroy();
}


To add a new field to a mlb2 table

use the AddField API:
myinstance->AddField("FIELDNAME");

To remove (delete) a field from the table
myinstance->RemoveField("FIELDNAME");
{deletes the field named FIELDNAME}
or
myinstance->RemoveField(GetFieldName(k));
{deletes the field number k}


To get a field's type of data

call the GetFieldType API:
printf("%s", myinstance->GetFieldType("NAME"));
or
call the GetFieldTypeByIndex API:
printf("%s",  myinstance->GetFieldTypeByIndex(k));

To set a field's type of data

call the SetFieldType API:
myinstance->SetFieldType("FIELDNAME", "FLOAT");
or
call the SetFieldTypeByIndex API:
myinstance->SetFieldTypeByIndex(k, "STRING");


To get the name of the field number k
call the GetFieldName API:
printf("%s", myinstance->GetFieldName(k));

To get the index of a field name
call the GetFieldIndex API:
printf("%d", myinstance->GetFieldIndex("NAME"));

To set the name of the field number k
use the SetFieldName API:
myinstance->SetFieldName(k, "NEWNAME");


#include <stdio.h>;
#include "mlb2.h";

int main(int argc, char* argv[]) {
    TMlb2* mlb = mlb->Create();
    mlb := TMlb2.Create;
    mlb->AddField("FIRST FIELD");
    mlb->AddField("SECOND FIELD");
    mlb->AddField("THIRD FIELD");
    mlb->SetFieldName(mlb->GetFieldName(2),   "COMPANY");      mlb->RemoveField(mlb->GetFieldName(mlb->FieldCount()));
    printf("%d", mlb->FieldCount());
     mlb->Destroy();
}


To add a new row to a mlb2 table

use the AddRow API:
myinstance->AddRow();
/*Adds a new row at the end of the table*/

To insert an empty row at the current position
use the gofirst ... functions ( group IV) to set the current row, and insert an empty row after or before the current row by using
myinstance->InsertRow(MLB_AFTER);
or
myinstance->InsertRow(MLB_BEFORE);
/*MLB_BEFORE and MLB_AFTER are constants meaning insert a row before or after the current position.
If the current row is the first row of the table or if the table is empty, the newly inserted row becomes the first row of the table.*/

To remove the current row
use the RemoveRow API:
myinstance->RemoveRow(); /*removes the current row and returns true if it has been well deleted*/

To remove a row by specifying its index
use the RemoveRowByIndex API:
myinstance->RemoveRowByIndex(4); /*removes the 4th row of the table, returns true if the 4th row exited and has been deleted, false either*/


To copy a row to memory
use the CopyRow API:
myinstance->CopyRow();
or
myinstance->CopyRowBySlot(1);

To paste a row from memory
use the PasteRow API:
myinstance->PasteRow();
or
myinstance->PasteRowBySlot(0);

sample: copy the 7th row and paste it in the 3rd row:
myinstance->Go(7);
myinstance->CopyRow();
myinstance->Go(3);
myinstance->PasteRow();


To get number of rows of the table
call the RowCount function:
printf("%d", myinstance->RowCount());

To get the number of the current row
call the GetCurrentRow API:
printf("%d", myinstance->GetCurrentRow());

To set the name of the field number k
sample: myinstance->Go(11);
printf("%d", myinstance.GetCurrentRow);
Must print 11 if success, 0 else (table empty ...).


#include <stdio.h>;
#include "mlb2.h";

int main(int argc, char* argv[]) {
    int i;
    TMlb2* mlb = mlb->Create();
    mlb := TMlb2.Create;
    mlb->AddField("Name");
    mlb->AddField("Address");
    for (i=0; i<4; i++) mlb->AddRow();
    mlb->GoFirst(); mlb->CopyRowBySlot(0);
    mlb->GoLast(); mlb->CopyRowBySlot(1);
    mlb->PasteRow();
    mlb->GoFirst(); mlb->PasteRowBySlot(1);
    printf("%d", mlb->RowCount());
    /*must print 4*/
    /*delete row 1*/
    mlb->GoFirst(); mlb->RemoveRow();
    printf("%d", mlb->RowCount());
    /*must print 3*/
    mlb->Destroy();
}


To test if the beginning of a table has been reached
use the BeginningOfFile property:
return myinstance->BeginningOfFile;
To test if the end of a table has been reached
use the EndOfFile property:
return myinstance->EndOfFile;


To set the current row as the first row 
use the GoFirst API:
myinstance->GoFirst();

To set the current row as the last row 
use the GoLast API:
myinstance->GoLast();

To set the current row as the next row 
use the GoNext API:
myinstance->GoNext();

To set the current row as the next row 
use the GoPrevious API:
myinstance->GoPrevious();

To set the current row to any other
use the GoPrevious API:
myinstance->Go(1);
/* same as GoFirst */

If case of success these functions return TRUE, else they return FALSE.
GoNext and GoPrevious return False when they have reached the End of the File or the Beginning of the file, so this information can be used to stop a navigation.

Sample:
myinstance->GoFirst();
while (!myinstance->GoNext());


To save and restore a position
SavePosition and RestorePosition API:
myinstance->Go(11);
myinstance->SavePosition();
myinstance->Go(4);
printf("%d",myinstance->GetPosition());
printf("%d",myinstance->GetCurrentRow());
...
myinstance->RestorePosition();
printf("%d",myinstance->GetPosition());
{must print 11}


To seek for a string data
Samples:
1- You want to seek for a record of field city equal to 'London':
/*This code Seeks for rows having London as city ...*/
myinstance->GoFirst();
myinstance->BeginSeek(MLB_FORWARD);
while (myinstance->SeekData("city", "=", "London")) {
}
myinstance->EndSeek();

2- To seek for a string from the end:
myinstance->GoLast();
myinstance->BeginSeek(MLB_BACKWARD);
while (myinstance->SeekData("city", "=", 'London')) {
}
myinstance->EndSeek();

3- To seek for a string like another string:
/*searches for all city records beginning with or containing L*/
myinstance->GoFirst();
myinstance->BeginSeek(MLB_FORWARD);
while (myinstance->SeekData("city", "LIKE", "*L*")) {
}
myinstance->EndSeek();
/*The following code searches for all records beginning with A, followed by any character, and by a character in between x and z (x, y or z), for sample AVx is a valid match*/
myinstance->GoFirst();
myinstance->BeginSeek(MLB_FORWARD);
while (myinstance->SeekData("field1", "LIKE", "A?[x-z]")) {
/*insert here you action*/
}
myinstance->EndSeek();

/*valid comparison operators for string matching are '=', 'LIKE', '<', '>', '<=', '>='*/

To seek for a float data along a field
Floats (or integers) can be searched along a field just like string datas except the LIKE operator is not valid for float seeking.
/*valid comparison operators for float matching are '=', '<', '>', '<=', '>='*/
Sample:
You want to seek for a percentage least or equal to 80.0%:
myinstance->GoLast();
myinstance->BeginSeek(MLB_BACKWARD);
while (myinstance->SeekFloat("percents", "<=", 80.0)) {
}
myinstance->EndSeek();

To check if a row matches a criteria
Now we are going to study Match functions, which are the same as Seek functions, but that applies only to the current row, and are not seeking for a criteria along rows.
Sample:
You want to go to the 2nd row and to check if this row's city matches cities beginning with Lond and ending with n or N, and if this row's price if equal to 1500 dollars:
int r;
myinstance->GoFirst();
myinstance->GoNext();
r = myinstance->MatchData("city", "=", "Lond*[n,N]") && myinstance->MatchFloat("price", "=", 1500);
/*r is true (1), if the matching is a success, else r is false (0)*/


To test if the table is empty
use the BeginningOfFile property:
r = myinstance->IsEmpty();
{same as r = myinstance->RowCount()==0;}


To get floats or string data by a field's name:   
use the GetFloat or GetData API:
int r;
myinstance->GoLast();
r = (int)myinstance->GetFloat("price");
myinstance->Go(7);
printf("%s", myinstance->GetData("address"));
/*This sample returns the price of the last row of the table, and the address of the 7th row*/

To get floats or string data by a field's index:   
use the GetFloatByIndex or GetDataIndex API:
int r;
char* s;
if (myinstance->Go(4)) {
/*if the 4th row exists*/
r = (int)myinstance->GetFloatByIndex(2);
s = myinstance->GetDataByIndex(4);
/*integer r receives the second's field's value of the 4th row, and string s receives the 4th field's value of the 4th row*/
}else {
}

/*No AccessData[field_index, row_index] in C++ version*/


To set floats or string data by a field's name:   
use the SetFloat or SetData API:
myinstance->GoFirst();
myinstance->GoNext();
myinstance->SetFloat("price", 1000);
myinstance->SetData("address", "washington avenue");


To set floats or string data by a field's index:   
use the GetFloatByIndex or GetDataIndex API:
myinstance->GoFirst();
myinstance->GoNext();
myinstance->SetFloatByIndex(2, 12500.5);
myinstance->SetDataByIndex(6, "washington avenue");


#include <stdio.h>;
#include "mlb2.h";

int main(int argc, char* argv[]) {
    TMlb2* mlb = mlb->Create();
    mlb->AddField("Name");
    mlb->AddField("Age");

    mlb->AddRow;
    mlb->AddRow;
    mlb->AddRow;
   mlb->GoFirst();
   mlb->SetData("Name", "Alfred");
   mlb->SetFloat("Age", 26);
   mlb->GoNext();
   mlb->SetData("Name", "Frederica");
   mlb->SetFloat("Age", 24);
   mlb->GoLast();
   mlb->SetData("Name", "Ryan");
   mlb->SetFloat("Age", 57);
    printf("%d", GetDataByIndex(1));
    /*prints "Ryan"*/

    mlb->Destroy();
}


Default
CSVSeparator:
CSVSeparator = ";";

QuoteSeparator:
QuoteSeparator = "\"";

Samples:
To read the following CSV file:
Name#City#Age
John#Washington#24
Andrei#Moscow#41

you need first to initialize
myinstance->CSVSeparator = '#';
/*QuoteSeparator is not used because CSV files don't use QuoteSeparator*/


LoadFromFile:   
For sample:
/*to load a comma separated file*/
myinstance->LoadFromFile("file.csv");

/*to load an ISAM file*/
myinstance->LoadFromFile("file.txt");

/*to load a mlb file*/
myinstance->LoadFromFile("file.mlb");

To load any file as a comma separated file:   
sample:
myinstance->LoadFromCSVFile("data.any");
/*data.any must have a CSV file's structure*/

To load any file as an ISAM file:   
sample:
myinstance->LoadFromISAMFile("data.any");
/*data.any must have an ISAM file's structure*/

To load any file as a MLB file:   
sample:
myinstance->LoadFromMLBFile("data.any");
/*data.any must have a MLB file's structure*/



When a table is loaded from a file, it is first automatically cleared with the init API.
That's to say the table loses all its previous data (fields and records), before reading and filling it with file's fields and data.
Don't forget to first save a table's data before loading new data.

All these functions return true if the loading is successful, false else.


To save a table to a file formatting it according to its extension:
use the SaveToFile API:
myinstance->SaveToFile("file.csv");
/*saves the table to a comma separated file*/

myinstance->SaveToFile("file.txt");
/*saves the table to an ISAM file*/

myinstance->SaveToFile("file.mlb");
/*saves the table to a mylittlebase file*/
/*excel not supported in mlb for C++*/

To save a table to any file format:
myinstance->SaveToCSVFile("data.any");
/*saves the table to the data.any file as a comma separated file*/

myinstance->SaveToISAMFile("data.any");
/*saves the table to the data.any file as an ISAM file*/

myinstance->SaveToMLBFile("data.any");
/*saves the table to the data.any file as a mylittlebase file*/
/*excel not supported in mlb for C++*/


All these functions return true if the saving is successful, false else.


#include <stdio.h>;
#include "mlb2.h";

int main(int argc, char* argv[]) {
    TMlb2* mlb = mlb->Create();
    mlb->LoadFromCSVFile("file1.csv");
    mlb->SaveToFile("file2.mlb");
    mlb->Destroy();
}


To convert a string to a float or integer value:
RobustStrToFloat:
/*all these samples are correct*/
float v;
int k;
v = myinstance->RobustStrToFloat("14.2");
v = myinstance->RobustStrToFloat("14,2");
k = (int)myinstance.RobustStrToFloat("4");
To convert a float to a string:
RobustFloatToStr:
printf("%s", myinstance->RobustFloatToStr(3.16));


To Sort rows with a STRING field's values:
use the SortByData API:
For sample a table has 2 fields, Name and Address, and you want to sort the table according to Name values:

bool b;
b = myinstance->SortByData("Name", MLB_LOWEST);
or
b = myinstance->SortByData("Name", MLB_GREATEST);
To Sort rows with a FLOAT field's values:
use the SortByFloat API:
For sample a table has 3 fields, Name, Address and Income, and you want to sort the table according to Income values as float values (not as string values):

bool b;
b = myinstance->SortByFloat("Income", MLB_LOWEST);
or
b = myinstance->SortByFloat("Income", MLB_GREATEST);

#define MLB_GREATEST true
#define MLB_LOWEST false
MLB_LOWEST sorts the table from the lowest value to the greatest.
MLB_GREATEST sorts the table from the greatest value to the lowest.

All these functions return true if the loading is successful, false else.

To Randomly Sort rows:
myinstance->RandomSort();
/*no return value*/


To make all rows distincts:
use the MakeDistinct API:
The Distinct boolean property is only true when the table's rows are the all distincts and no row is duplicated.
The MakeDistinct function deletes any duplicated row, and makes the table distinct.
It is a procedure, no return value.

Sample:
myinstance->MakeDistinct();
/*now Distinct is true*/

MakeDistinct method and Distinct property, were created to prepare a minimal sql engine, to query the table, and to answer to the sql request SELECT DISTINCT.

To compare 2 rows:
bool b;
b = myinstance->AreSameRows(1, 2);
/*compares rows 1 and 2, if the rows are the same (same values for each field), it returns true, else it returns false*/


To add one table's row to another table:
use the Fusion API:

Samples:
/*myinstance is a table made of 3 fields, name, firstname and zipcode*/
/*source is a table made of 4 fields, name, firstname, age and income*/

/*to fusion, myinstance table, with source table, and to put the result in the mytarget table*/
bool b;
myinstance->CSVSeparator = ",";
b = myinstance->Fusion(source, mytarget, "ALL,*");
/*mytarget is now a table made of 5 fields, name, firstname, zipcode, age and income, and contains both rows of myinstance and source*/

myinstance->CSVSeparator = "x";
b = myinstance.Fusion(source, mytarget, "ALLxnamexfirstname");
/*mytarget is now a table made of 2 fields, name and firstname, and contains rows of both myinstance and source, for these 2 fields*/

myinstance->CSVSeparator = ";";
b = myinstance->Fusion(source, mytarget, "COMMON;*");
/*mytarget is now a table made of the 2 common fields, name and firstname and contains names records of both myinstance and source*/


#include <stdio.h>;
#include "mlb2.h";

int main(int argc, char* argv[]) {
    TMlb2* mlb = mlb->Create();
    TMlb2* source2 = source2->Create();
    TMlb2* target = target->Create();

    mlb->LoadFromFile("source_table1.mlb");
    table2->LoadFromFile("source_table2.mlb");
    mlb->CSVSeparator = ':';
   mlb->Fusion(table2, target, "ALL:*");
   target->MakeDistinct();
   if (target->SortByData("Name")) {
   } else {
   }
    target->SaveToFile("target_table.csv");

    target->Destroy();
    source2->Destroy();
    mlb->Destroy();
}


